#!/bin/bash
#### Non-Portable Functions ####
debug()
{
	(>&2 echo "Output Binaries: ")
	for b in "cowsay" "figlet" "printf" "echo"
	do
		[ -f "$(which $b 2>/dev/null)" ] && (>&2 echo "	$b Binary: $(which $b)") || (>&2 echo "	$b Binary: NONE")
	done
	(>&2 echo "Local Settings: ")
	for s in "STYLE" "BACKGROUND" "FOREGROUND" "BOLD" "ERR_OUT" "DEBUG" "LOG" "LOG_STYLED" "NL" "PNL" "STRING"
	do
		if [ -z "${!s}" ]; then
			(>&2 echo "	${s}: ")
		else
			(>&2 echo "	$s: ${!s}")
		fi
	done
}
export_portable_cprint()
{
	if [ $# -lt 1 ]; then
		$0 -E -R -S "Missing template name."
		exit 1
	fi
	if [ ! -f "$(which sed 2>/dev/null)" ]; then
		$0 -E -R -S "Missing sed Binary. Required for export."
		exit 1
	fi
	touch "$1"
	echo "" > "$1"
	echo "cprint()" >> "$1"
	echo "{" >> "$1"
	local BLOCK_FLAG="####"
	local RECORD=1
	local VARS=( "ERR_OUT" "NL" "PNL" "BOLD" "STYLE" "POS" "BACKGROUND" "FOREGROUND" "LOG" "LOG_STYLED" "STRING"  )
	local FUNCS=( "process_nl" "process_prenl" "process_string" "random_color" "translate_color_code" "parse_args")
	local UNIQUE_NAMES=( "${VARS[@]}" "${FUNCS[@]}" )
	cat "$0" | while read line
	do
		case "$line" in
			"#!/bin/bash" | \
			"$BLOCK_FLAG Non-Portable"*) RECORD=0 ;;
			"$BLOCK_FLAG Portable"*) RECORD=1 && continue ;;
			*)
				if [ $RECORD -eq 1 ]; then
					case "$line" in
						*"033["*) echo "${line}" | sed -e 's#033#\\033#' >> "$1" ;;
						*"e["*) echo "${line}" | sed -e 's#e\[#\\e\[#' >> "$1" ;;
						*)
							for n in "${UNIQUE_NAMES[@]}"
							do
								[[ "${line}" == *"$n"* ]] && line="$(echo "${line}" | sed -e "s#$n#CPRINT_$n#g")"
							done
							echo "${line}" >> "$1"
							;;
					esac
				fi
		esac
	done
	for v in "${VARS[@]}"
	do
		echo "unset CPRINT_$v" >> "$1"
	done
	echo "}" >> "$1"
	if [ -f "$(which beautysh)" ]; then
		beautysh --tab --files "$1"
	else
		$0 -E -Y -S "beautysh missing. Manual Formatting for $1 required."
	fi
}
self_tests()
{
	$0 -e -A -S "Cowsay"
	$0 -e -F -S "Figlet"
	$0 -e -c -S "Centered"
	$0 -e -K -S "Black"
	$0 -e -W -S "White"
	$0 -e -R -S "Red"
	$0 -e -Y -S "Yellow"
	$0 -e -G -S "Green"
	$0 -e -B -S "Blue"
	$0 -e -C -S "Cyan"
	$0 -e -P -S "Purple"
	$0 -e -I -K -S "Bold Black"
	$0 -e -I -W -S "Bold White"
	$0 -e -I -R -S "Bold Red"
	$0 -e -I -Y -S "Bold Yellow"
	$0 -e -I -G -S "Bold Green"
	$0 -e -I -B -S "Bold Blue"
	$0 -e -I -C -S "Bold Cyan"
	$0 -e -I -P -S "Bold Purple"
	exit 0
}
usage()
{
	echo ""
	echo "	Usage for $0:"
	echo ""
	echo "	[-h|--help]: Display this dialog"
	echo "	--debug: Enable debugging."
	echo "	--selftests: Run selftests."
	echo "	--export filename: Export portable cprint bash function to specified file. "
	echo ""
	echo "	[-e|--stderr]: Send output to stderr instead of stdout (default)"
	echo "	[-n|--no-newline]: Do not print newline."
	echo "	[-p|--pre-newline]: Prepend newline."
	echo "	[-I|-b|--bold]: Enable bold colors."
	echo -n "	[-A|--cowsay]: Output with cowsay. Exists?: "
	[ -f "$(which cowsay 2>/dev/null)" ] && $0 -G -S "YES ($(which cowsay))" || $0 -R -S "NO"
	echo -n "	[-F|--figlet]: Output with figlet. Exists?: "
	[ -f "$(which figlet 2>/dev/null)" ] && $0 -G -S "YES ($(which figlet))" || $0 -R -S "NO"
	echo "	--cow-file file: Set the cowsay style if using cowsay."
	echo "	--fig-file file: Set the figlet style if using figlet."
	echo "	[-c|--centered]: Center text."
	echo "	[--BG|--bg|--background] color-name: Set background color-name."
	echo "	[--FG|--fg|--foreground] color-name: Set foreground color-name."
	$0 -n -S "	[Accepted color-names: "
	$0 -n -b white -K -S "black"
	echo -n " "
	$0 -n -W -S "white "
	$0 -n -R -S "red "
	$0 -n -Y -S "yellow "
	$0 -n -G -S "green "
	$0 -n -B -S "blue "
	$0 -n -C -S "cyan "
	$0 -n -P -S "purple "
	$0 -n -Z -S "random]"
	echo ""
	$0 -p -f black -b white -S "	[-K|--black]: Print Black text."
	$0 -f white -b black -S "	[-W|--white]: Print White text."
	$0 -R -S "	[-R|--red]: Print Red text."
	$0 -Y -S "	[-Y|--yellow]: Print Yellow text."
	$0 -G -S "	[-G|--green]: Print Green text."
	$0 -B -S "	[-B|--blue]: Print Blue text."
	$0 -C -S "	[-C|--cyan]: Print Cyan text."
	$0 -P -S "	[-P|--purple]: Print Purple text."
	$0 -Z -S "	[-Z|--random]: Print Random Color text."
	echo "	[-L|--log-styled] logfile: Output to specified log file with styles."
	echo "	[-l|--log] logfile: Output to specified log file without styles."
	echo "	[-S|--string] string: Set the print string."
	echo ""
	exit 0
}
#### Portable Functions ####
process_nl()
{
	if [ -z ${NL} ]; then
		[ ! -z ${ERR_OUT} ] && (>&2 echo "") || echo ""
	fi
}
process_prenl()
{
	if [ ! -z ${PNL} ]; then
		while [ $PNL -gt 0 ]
		do
			[ ! -z ${ERR_OUT} ] && (>&2 echo "") || echo ""
			[ ! -z ${LOG_STYLED} ] && echo ""  >> "$LOG_STYLED"
			[ ! -z ${LOG} ] && echo ""  >> "$LOG"
			((PNL--))
		done
	fi
}
process_string()
{
	[ -z "${STRING}" ] && STRING=""
	[ ! -z ${LOG} ] && echo "$STRING" >> "$LOG"
	[ -z ${POS} ] && POS=0 # Position is not set, so use the default.
	[ ! -z ${STYLE} ] && STRING="$($STYLE $STRING)" # Apply style
	[ -z "${FOREGROUND}" ] && FOREGROUND=""
	[ -z "${BACKGROUND}" ] && BACKGROUND=""
	RESET=$(translate_color_code "RESET")
	if [ -f "$(which printf 2>/dev/null)" ];then
		[ ! -z ${ERR_OUT} ] && (>&2 printf -- "$FOREGROUND$BACKGROUND%$POS"s"$RESET" "$STRING") || printf -- "$FOREGROUND$BACKGROUND%$POS"s"$RESET" "$STRING"
	else # printf doesn't exist
		[ ! -z ${ERR_OUT} ] && (>&2 echo "$FOREGROUND""$BACKGROUND""$STRING""$RESET") || echo "$FOREGROUND""$BACKGROUND""$STRING""$RESET"
	fi
	[ ! -z ${LOG_STYLED} ] && echo -e "$STRING" >> "$LOG_STYLED"
}
random_color()
{
	local colors=( "BLACK" "WHITE" "RED" "YELLOW" "GREEN" "BLUE" "CYAN" "PURPLE" )
	echo "${colors[$RANDOM % ${#colors[@]}]}"
}
translate_color_code()
{
	if [ $# -lt 1 ]; then
		echo "Missing color name."
		exit 1
	fi
	local CODE=""
	case "$1" in
		"FG"*)
			case "$1" in
				*"BLACK" ) CODE='30m' ;;
				*"WHITE" ) CODE='37m' ;;
				*"RED" ) CODE='31m' ;;
				*"YELLOW" ) CODE='33m' ;;
				*"GREEN" ) CODE='32m' ;;
				*"BLUE" ) CODE='34m' ;;
				*"CYAN" ) CODE='36m' ;;
				*"PURPLE" ) CODE='35m' ;;
			esac
			if [ ! -z ${BOLD} ]; then
				if [ $BOLD -eq 1 ]; then
					CODE='1;'$CODE
				fi
			else
				CODE='0;'$CODE
			fi
			;;
		"BG"*)
			case "$1" in
				*"BLACK" ) CODE='40m' ;;
				*"WHITE" ) CODE='47m' ;;
				*"RED" ) CODE='41m' ;;
				*"YELLOW" ) CODE='43m' ;;
				*"GREEN" ) CODE='42m' ;;
				*"BLUE" ) CODE='44m' ;;
				*"CYAN" ) CODE='46m' ;;
				*"PURPLE" ) CODE='45m' ;;
			esac
			;;
		"RESET") CODE='m' ;;
	esac
	case "$(uname -s)" in
		"Darwin") echo "\033[""$CODE" ;;
		"Linux") echo "\e[""$CODE" ;;
		*)
			echo "Unknown System: $(uname -s)"
			exit 1
			;;
	esac
}
parse_args()
{
	while [ ${#} -gt 0 ];
	do
		case "${1}" in
			#### Non-Portable Switches ####
			"-h" | "--help") usage ;;
			"--debug") DEBUG=1 ;;
			"--self-tests" | "--self-test" | "--selftests" | "--selftest") self_tests ;;
			"--export")
				if [ -f "$2" ]; then
					echo "File already exists: $2"
					exit 1
				fi
				if [ -d "$2" ]; then
					echo "Specified filename is a directory: $2"
					exit 1
				fi
				export_portable_cprint "$2"
				shift
				;;
			#### Portable Switches ####
			"-e" | "--stderr") ERR_OUT=1 ;;
			"-n" | "no-newline") NL=1 ;;
			"-p" | "--pre-newline")
				[ -z ${PNL} ] && PNL=0
				((PNL++))
				;;
			"-I" | "-b" | "--bold" ) BOLD=1 ;;
			"-A" | "--cowsay")
				if [ -f "$(which cowsay 2>/dev/null)" ]; then
					STYLE="$(which cowsay)"
				else
					(>&2 echo "Skipping $1 becasue, binary not available.")
				fi
				;;
			"-F" | "--figlet")
				if [ -f "$(which figlet 2>/dev/null)" ]; then
					STYLE="$(which figlet)"
				else
					(>&2 echo "Skipping $1 becasue, binary not available.")
				fi
				;;
			"--cow-file" | "--fig-file")
				if [ ! -z "${STYLE}" ]; then
					if [ ! -f "$2" ]; then
						(>&2 echo "Skipping $1 because, not a valid file: $2.")
					else
						STYLE="$STYLE -f $2"
					fi
				else
					(>&2 echo "Skipping $1 because, STYLE not set.")
				fi
				;;
			"-c" | "--centered") [ $(tput cols) -le 80 ] && POS=0 || POS=$((( $(tput cols) - 80 ) / 2 )) ;;
			"--BG" | "--bg" | "--background" | "--FG" | "--fg"| "--foreground")
				local TYPE=""
				local COLOR_CODE=""
				case "$1" in
					"--BG" | "--bg" | "--background") TYPE="BG" ;;
					"--FG" | "--fg" | "--foreground") TYPE="FG" ;;
				esac
				case "$2" in
					"black") COLOR_CODE="$(translate_color_code "$TYPE"'BLACK')";;
					"white") COLOR_CODE="$(translate_color_code "$TYPE"'WHITE')";;
					"red") COLOR_CODE="$(translate_color_code "$TYPE"'RED')";;
					"yellow") COLOR_CODE="$(translate_color_code "$TYPE"'YELLOW')";;
					"green") COLOR_CODE="$(translate_color_code "$TYPE"'GREEN')";;
					"blue") COLOR_CODE="$(translate_color_code "$TYPE"'BLUE')";;
					"cyan") COLOR_CODE="$(translate_color_code "$TYPE"'CYAN')";;
					"purple") COLOR_CODE="$(translate_color_code "$TYPE"'PURPLE')";;
					"random") COLOR_CODE="$(translate_color_code "$TYPE""$(random_color)")";;
					"*")
						(>&2 echo "Unrecognized Arguement: $2")
						exit 1
						;;
				esac
				case "$1" in
					"--BG" | "--bg" | "--background") BACKGROUND="$COLOR_CODE" ;;
					"--FG" | "--fg" | "--foreground") FOREGROUND="$COLOR_CODE" ;;
				esac
				shift
			;;
			"-K" | "--black") FOREGROUND="$(translate_color_code 'FGBLACK')";;
			"-W" | "--white") FOREGROUND="$(translate_color_code 'FGWHITE')";;
			"-R" | "--red") FOREGROUND="$(translate_color_code 'FGRED')";;
			"-Y" | "--yellow") FOREGROUND="$(translate_color_code 'FGYELLOW')";;
			"-G" | "--green") FOREGROUND="$(translate_color_code 'FGGREEN')";;
			"-B" | "--blue") FOREGROUND="$(translate_color_code 'FGBLUE')";;
			"-C" | "--cyan") FOREGROUND="$(translate_color_code 'FGCYAN')";;
			"-P" | "--purple") FOREGROUND="$(translate_color_code 'FGPURPLE')";;
			"-Z" | "--random") FOREGROUND="$(translate_color_code "$TYPE""$(random_color)")";;
			"-L" | "--log-styled")
				if [ -d "$2" ]; then
					echo "Specified filename is a directory: $2"
					exit 1
				fi
				LOG_STYLED="$2"
				shift
				;;
			"-l" | "--log")
				if [ -d "$2" ]; then
					echo "Specified filename is a directory: $2"
					exit 1
				fi
				LOG="$2"
				shift
				;;
			"-S" | "--string")
				shift
				STRING="$*"
				break
				;;
			*)
				STRING="$*"
				break
				;;
		esac
		shift 1
	done
}
#### Portable Main Run ####
parse_args "$@"
if [ -z "${STRING}" ]; then
	STRING="$*"
fi
#### Non-Portable Main Run ####
[ ! -z ${DEBUG} ] && debug
#### Portable Main Run ####
if [ ! -z "${STRING}" ]; then
	process_prenl
	process_string
	process_nl
fi
#### Non-Portable ####
exit 0
